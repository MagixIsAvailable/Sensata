"""Initial Migration

Revision ID: 1e9da2012aed
Revises: 16b0f3d54ea4
Create Date: 2024-10-29 12:57:53.496243

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '1e9da2012aed'
down_revision: Union[str, None] = '16b0f3d54ea4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sensor_group',
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('group_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('group_id')
    )
    op.create_table('sensor_table',
    sa.Column('sensor_id', sa.Integer(), nullable=False),
    sa.Column('manufacturer', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('serial_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('sensor_model_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('sensor_id')
    )
    op.create_table('user',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_activated', sa.Boolean(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('api_key',
    sa.Column('api_key_id', sa.Integer(), nullable=False),
    sa.Column('user_id_user', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('permission_level', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('api_key_text', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['user_id_user'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('api_key_id')
    )
    op.create_table('group_join_sensors',
    sa.Column('group_id_sensor_groups', sa.Integer(), nullable=False),
    sa.Column('sensor_id_sensor_table', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id_sensor_groups'], ['sensor_group.group_id'], ),
    sa.ForeignKeyConstraint(['sensor_id_sensor_table'], ['sensor_table.sensor_id'], ),
    sa.PrimaryKeyConstraint('group_id_sensor_groups', 'sensor_id_sensor_table')
    )
    op.create_table('sensor_data',
    sa.Column('sensor_data_id', sa.Integer(), nullable=False),
    sa.Column('data', sa.LargeBinary(), nullable=True),
    sa.Column('sensor_id_sensor_table', sa.Integer(), nullable=False),
    sa.Column('time_recorded', sa.DateTime(), nullable=True),
    sa.Column('time_added', sa.DateTime(), nullable=True),
    sa.Column('unique_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['sensor_id_sensor_table'], ['sensor_table.sensor_id'], ),
    sa.PrimaryKeyConstraint('sensor_data_id')
    )
    op.create_table('user_session',
    sa.Column('session_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_used', sa.DateTime(), nullable=True),
    sa.Column('last_ip', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('user_id_user', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id_user'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('session_id')
    )
    op.create_table('api_keys_join_groups',
    sa.Column('api_key_id_api_keys', sa.Integer(), nullable=False),
    sa.Column('group_id_sensor_groups', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['api_key_id_api_keys'], ['api_key.api_key_id'], ),
    sa.ForeignKeyConstraint(['group_id_sensor_groups'], ['sensor_group.group_id'], ),
    sa.PrimaryKeyConstraint('api_key_id_api_keys', 'group_id_sensor_groups')
    )
    op.create_table('api_keys_join_sensors',
    sa.Column('api_key_id_api_keys', sa.Integer(), nullable=False),
    sa.Column('sensor_id_sensor_table', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['api_key_id_api_keys'], ['api_key.api_key_id'], ),
    sa.ForeignKeyConstraint(['sensor_id_sensor_table'], ['sensor_table.sensor_id'], ),
    sa.PrimaryKeyConstraint('api_key_id_api_keys', 'sensor_id_sensor_table')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('api_keys_join_sensors')
    op.drop_table('api_keys_join_groups')
    op.drop_table('user_session')
    op.drop_table('sensor_data')
    op.drop_table('group_join_sensors')
    op.drop_table('api_key')
    op.drop_table('user')
    op.drop_table('sensor_table')
    op.drop_table('sensor_group')
    # ### end Alembic commands ###
